// Generated by CoffeeScript 1.6.2
(function() {
  var browserify, chokidar, colors, convertSourceMap, fs, options, path, through;

  path = require("path");

  fs = require("fs");

  colors = require("colors");

  browserify = require("browserify");

  chokidar = require("chokidar");

  through = require("through");

  convertSourceMap = require("convert-source-map");

  options = {
    ignore: /(\/\.|~$)/,
    watch: true,
    debug: true,
    build: {
      "coffee": function(file, data) {
        var coffee, comment, compiled;

        coffee = require("coffee-script");
        compiled = coffee.compile(data, {
          sourceMap: true,
          generatedFile: true,
          inline: true
        });
        comment = convertSourceMap.fromJSON(compiled.v3SourceMap).setProperty("sources", [file]).toComment();
        return compiled.js + "\n" + comment;
      }
    }
  };

  module.exports = function(ops, out) {
    var basedir, bundle, key, value, watcher, _ref;

    if ((typeof ops === "string" || ops instanceof String) && (typeof out === "string" || out instanceof String)) {
      options.main = ops;
      options.out = out;
    } else {
      for (key in ops) {
        value = ops[key];
        if (key !== "build") {
          options[key] = value;
        }
      }
      if (opts.build) {
        _ref = opts.build;
        for (key in _ref) {
          value = _ref[key];
          options.build[key] = value;
        }
      }
    }
    basedir = path.dirname(module.parent.filename);
    watcher = chokidar.watch(path.resolve(basedir, options.main), {
      ignored: options.ignore,
      ignoreInitial: true,
      persistent: true
    });
    bundle = function(i, o) {
      var start;

      start = Date.now();
      return browserify().transform(function(file) {
        var data, end, ext, func, write, _ref1;

        watcher.add(file);
        _ref1 = options.build;
        for (ext in _ref1) {
          func = _ref1[ext];
          if (RegExp("\." + ext + "$").test(file)) {
            data = "";
            write = function(buf) {
              return data += buf;
            };
            end = function() {
              this.queue(func(file, data));
              return this.queue(null);
            };
            return through(write, end);
          }
        }
        return through();
      }).require(path.resolve(basedir, i), {
        entry: true
      }).bundle({
        debug: options.debug
      }).on("error", function(err) {
        return console.log("[piping-browser]".bold.yellow, "Error:", err);
      }).on("end", function() {
        return console.log("[piping-browser]".bold.yellow, "Built in", Date.now() - start, "ms");
      }).pipe(fs.createWriteStream(path.resolve(basedir, o)));
    };
    watcher.on("change", function(file) {
      console.log("[piping-browser]".bold.yellow, "File", path.relative(process.cwd(), file), "has changed, rebuilding");
      if (options.watch) {
        return bundle(options.main, options.out);
      }
    });
    return bundle(options.main, options.out);
  };

}).call(this);
